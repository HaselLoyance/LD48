<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_width = objWorld.part_width
part_height = objWorld.part_height
part_col = 0
part_row = 0
x1 = 0
y1 = 0
x2 = 0
y2 = 0
drag_point_x = 0
drag_point_y = 0
drag_start_x = 0
drag_start_y = 0
drag_dist_x = 0
drag_dist_y = 0
top_left = objWorld.top_left
dragging=false
animation_lock = false
animate_goto = false

t = floor(random_range(0,500))
alpha = 1.0
wobble_x = 0
wobble_y = 0
wobble_size = 3
wobble_intensity_y = 1/11
wobble_intensity_x = 1/7

goto_x = 0
goto_y = 0
goto_speed = 0.3
far_x = 0
far_y = 0
do_not_warp_on_goto_reached = false

object_grid = ds_grid_create(part_width/objWorld.player_step, part_height/objWorld.player_step)
object_list = ds_list_create()
destroy_on_goto = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(1)
ds_grid_destroy(object_grid)
ds_list_destroy(object_list)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pop off back to the start
animation_lock = true
animate_goto = true

goto_x = far_x
goto_y = far_y
goto_speed=0.03
do_not_warp_on_goto_reached = true
destroy_on_goto = true
wobble_size =10
wobble_intensity_x = 1
wobble_intensity_y = 1
audio_play_sound(sndPopOff, 0, false)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize the objects grid with zeroes
for (var i = 0; i &lt; ds_grid_height(object_grid); i++)
{
    for (var j = 0; j &lt; ds_grid_width(object_grid); j++)
    {
        object_grid[# j, i] = 0
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not animation_lock
{
x1 = top_left + part_col * part_width
y1 = top_left + part_row * part_height
x2 = x1 + part_width
y2 = y1 + part_height

}

wobble_x = wobble_size * cos(t*wobble_intensity_x)
wobble_y = wobble_size * sin(t* wobble_intensity_y)
t += 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// mouse controls
if instance_number(objPlayer) == 0 or (instance_number(objPlayer) == 1 and objPlayer.portal_reached)
exit

if mouse_check_button_pressed(mb_left)
{
    if (!dragging and !animation_lock and point_in_rectangle(mouse_x, mouse_y, x1, y1, x2, y2))
    {
        dragging = true
        drag_start_x = mouse_x
        drag_start_y = mouse_y
        
        drag_point_x = mouse_x - x1
        drag_point_y = mouse_y - y1
        
        drag_dist_x = 0
        drag_dist_y = 0
    
        objWorld.part_dragged = self
        audio_play_sound(sndDragBegin, 0,false)
    }
}

if dragging and mouse_check_button(mb_left)
{
    real_x = mouse_x
    real_y = mouse_y
    
    drag_dist_x = drag_dist_x + 0.2 * (real_x - (drag_dist_x + x1 + drag_point_x))
    drag_dist_y = drag_dist_y + 0.2 * (real_y - (drag_dist_y + y1 + drag_point_y))
    
    objWorld.part_hovered = scrGetPartUnderMouse()
}

if dragging and mouse_check_button_released(mb_left)
{
    dragging = false
    drag_x = 0
    drag_y = 0
    drag_start_x = 0
    drag_start_y = 0
    drag_dist_x = 0
    drag_dist_y = 0
    drag_point_x = 0
    drag_point_y =0
    objWorld.part_dragged = noone
        audio_play_sound(sndDragStop, 0,false)
    
    col = objWorld.part_hovered
    if col != noone
    {
        temp_row = col.part_row
        temp_col = col.part_col
        temp_far_x = col.far_x
        temp_far_y = col.far_y
        
        col.part_row = part_row
        col.part_col = part_col
        col.far_x = far_x
        col.far_y = far_y
        
        part_row = temp_row
        part_col = temp_col
        far_x = temp_far_x
        far_y = temp_far_y
        
        col.goto_x = x1
        col.goto_y = y1
        col.animation_lock = true
        col.animate_goto = true
        col.goto_speed = 0.3
        

        goto_x = col.x1
        goto_y = col.y1
        goto_speed = 0.3
        
        with col{ event_user(1)}
    }
    else
    {
        goto_x = x1
        goto_y = y1
        goto_speed = 0.3
    }
    
    event_user(1)
    objWorld.part_hovered = noone
   
    animation_lock = true
    animate_goto = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not animation_lock
{
    x = x1 + drag_dist_x
    y = y1 + drag_dist_y
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// animations

if animation_lock and animate_goto
{
    dist_x = goto_x - x
    dist_y = goto_y - y
    if abs(dist_x) &lt;= 2 and abs(dist_y) &lt;= 2
    {
        animation_lock = false
        animate_goto = false
        if not do_not_warp_on_goto_reached
        {
        goto_y = 0
        goto_x = 0
        x1 = top_left + part_col * part_width
        y1 = top_left + part_row * part_height
        x2 = x1 + part_width
        y2 = y1 + part_height
        event_user(0)
        }
        if destroy_on_goto
        {
            animation_lock = true
        }
        exit;
    }
    
    diff_x = goto_speed*dist_x
    diff_y =goto_speed*dist_y
    x = x + diff_x
    y = y + diff_y
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy all of the objects defined by object grid

for (var  i = 0; i &lt; ds_list_size(object_list); i++)
{
    obj = ds_list_find_value(object_list, i)
    instance_destroy(obj)
}

ds_list_clear(object_list)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create all of the objects given by the object grid
ds_list_clear(object_list)
for (var i = 0; i &lt; ds_grid_height(object_grid); i++)
{
    for (var j = 0; j &lt; ds_grid_width(object_grid); j++)
    {
        if object_grid[# j, i] == 1
        {
            obj = instance_create(
                x1+objWorld.player_step * j,
                y1+objWorld.player_step * i,
                objWall)
                
            ds_list_add(object_list, obj)
        }
        
        if object_grid[# j, i] == 2
        {
            obj = instance_create(
                x1+objWorld.player_step * j,
                y1+objWorld.player_step * i,
                objPortal)
            obj.x1 = objWorld.player_step * j
            obj.y1  = objWorld.player_step * i
            obj.part = self
           // ds_list_add(object_list, obj)
        }
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if objWorld.part_dragged != noone
{
    if objWorld.part_dragged == self
    {
        alpha = 1.0
    }
    else if objWorld.part_hovered == self
    {
        alpha = 0.8
    }
    else
    {
        alpha = 0.4
    }
}
else
{
    alpha = 1.0
}

draw_sprite_ext(
    sprite_index,
    0,
    x  + wobble_x ,
    y + wobble_y,
    1,
    1,
    0,
    c_white,
    alpha,
)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
